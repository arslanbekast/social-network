{"version":3,"file":"static/js/44.c042d752.chunk.js","mappings":"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","sources":["webpack://social-network/./src/components/Login/Login.module.css?3530","components/Login/Login.tsx","components/common/FormsControls/FormsControls.tsx","utils/validators/validators.ts","webpack://social-network/./src/components/common/FormsControls/FormsControls.module.css?eb50"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"loginWrapper\":\"Login_loginWrapper__L5dEv\",\"login\":\"Login_login__zWmYt\",\"title\":\"Login_title__VNWNg\",\"inputWrapper\":\"Login_inputWrapper__6VeDd\",\"iconWrapper\":\"Login_iconWrapper__jJ3ja\",\"rememberWrapper\":\"Login_rememberWrapper__6G+Us\",\"loginBtn\":\"Login_loginBtn__-XTkL\"};","import React, {FC} from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {StateType} from \"../../redux/redux-store\";\r\nimport style from '../common/FormsControls/FormsControls.module.css'\r\nimport s from './Login.module.css'\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n    captchaUrl: string | null\r\n}\r\ntype MapDispatchPropsType = {\r\n    login: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n}\r\n\r\ntype LoginPropsType = MapStatePropsType & MapDispatchPropsType\r\nconst Login: FC<LoginPropsType> = ({isAuth, login, captchaUrl}) => {\r\n    const onSubmit = (formData: FormDataType) => {\r\n        const {email, password, rememberMe, captcha} = formData\r\n        login(email, password, rememberMe, captcha)\r\n    }\r\n\r\n    if (isAuth) {\r\n        return <Redirect to=\"/profile\" />\r\n    }\r\n\r\n    return (\r\n        <div className={s.loginWrapper}>\r\n            <div className={s.login}>\r\n                <h2 className={s.title}>Login into<br/>your account</h2>\r\n                <LoginReduxForm onSubmit={onSubmit} captchaUrl={captchaUrl}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\ntype LoginFormProps = {\r\n    captchaUrl: string | null\r\n}\r\ntype FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\n\r\nconst LoginForm: FC<InjectedFormProps<FormDataType, LoginFormProps> & LoginFormProps> = ({handleSubmit, error, captchaUrl}) => {\r\n\r\n    return (\r\n            <form onSubmit={handleSubmit} className={s.loginForm}>\r\n                <div className={s.inputWrapper}>\r\n                    <div className={s.iconWrapper}>\r\n                        <i className=\"fa-regular fa-envelope\"></i>\r\n                    </div>\r\n\r\n                    <Field name=\"email\" placeholder=\"Email\" component={Input} validate={[required]}/>\r\n                </div>\r\n                <div className={s.inputWrapper}>\r\n                    <div className={s.iconWrapper}>\r\n                        <i className=\"fa-solid fa-lock\"></i>\r\n                    </div>\r\n\r\n                    <Field type=\"password\" name=\"password\" placeholder=\"Password\" component={Input}\r\n                           validate={[required]}/>\r\n                </div>\r\n                <div className={s.rememberWrapper}>\r\n                    <Field type=\"checkbox\" name=\"rememberMe\" id=\"rememberMe\" component={Input}/>\r\n                    <label htmlFor=\"rememberMe\">Remember me</label>\r\n                </div>\r\n                { captchaUrl && <img src={captchaUrl} /> }\r\n                { captchaUrl && <Field name=\"captcha\" placeholder=\"Symbols from image\" component={Input} validate={[required]}/> }\r\n                {\r\n                    error && <div className={style.formSummaryError}>\r\n                        {error}\r\n                    </div>\r\n                }\r\n\r\n                <div>\r\n                    <button className={s.loginBtn}>Login</button>\r\n                </div>\r\n            </form>\r\n    );\r\n};\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType, LoginFormProps>({form: 'login'})(LoginForm)\r\n\r\nconst mapStateToProps = (state: StateType) => ({\r\n    captchaUrl: state.auth.captchaUrl,\r\n    isAuth: state.auth.isAuth\r\n})\r\nexport default connect(mapStateToProps, {login})(Login)","import styles from './FormsControls.module.css'\r\n\r\nexport const FormControl = ({input, meta: {touched, error}, children, ...props}: any) => {\r\n    const hasError = touched && error\r\n\r\n    return (\r\n        <div className={styles.formControl+\" \"+(hasError ? styles.error : \"\")}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\nexport const Textarea = (props: any) => {\r\n\r\n    const {input, meta, ...restProps} = props\r\n\r\n    return (\r\n        <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\r\n    )\r\n}\r\n\r\nexport const Input = (props: any) => {\r\n\r\n    const {input, meta, ...restProps} = props\r\n\r\n    return (\r\n        <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n    )\r\n}","export const required = (value: string) => {\r\n    if (value) {\r\n        return undefined\r\n    }\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n    if (value.length > maxLength) {\r\n        return `Max length is ${maxLength} symbols`\r\n    }\r\n    return undefined\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__Fo9Fg\",\"error\":\"FormsControls_error__Mz112\",\"formSummaryError\":\"FormsControls_formSummaryError__EQHcD\"};"],"names":["LoginReduxForm","reduxForm","form","handleSubmit","error","captchaUrl","onSubmit","className","s","Field","name","placeholder","component","Input","validate","required","type","id","htmlFor","src","style","connect","state","auth","isAuth","login","to","formData","email","password","rememberMe","captcha","FormControl","input","meta","touched","children","hasError","styles","Textarea","props","restProps","value","maxLengthCreator","maxLength","length"],"sourceRoot":""}