{"version":3,"file":"static/js/75.579e9089.chunk.js","mappings":"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","sources":["webpack://social-network/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://social-network/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://social-network/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","webpack://social-network/./src/components/Profile/Profile.module.css?b512","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/common/FormsControls/FormsControls.tsx","utils/validators/validators.ts","webpack://social-network/./src/components/common/FormsControls/FormsControls.module.css?eb50"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"profileInfoWrapper\":\"ProfileInfo_profileInfoWrapper__O2pAU\",\"mainImgBox\":\"ProfileInfo_mainImgBox__3mgel\",\"descBlock\":\"ProfileInfo_descBlock__-g+cO\",\"userPhotoBox\":\"ProfileInfo_userPhotoBox__hjIbU\",\"userPhoto\":\"ProfileInfo_userPhoto__T7LES\",\"changePhotoBox\":\"ProfileInfo_changePhotoBox__cgy25\",\"changePhotoLabel\":\"ProfileInfo_changePhotoLabel__5gfgo\",\"changePhotoInput\":\"ProfileInfo_changePhotoInput__hJm3s\",\"userFullName\":\"ProfileInfo_userFullName__YpRio\",\"userStatus\":\"ProfileInfo_userStatus__VVLmb\",\"userStatusInput\":\"ProfileInfo_userStatusInput__GkXwX\",\"aboutWrapper\":\"ProfileInfo_aboutWrapper__BCQWQ\",\"aboutTitleWrapper\":\"ProfileInfo_aboutTitleWrapper__vM-vr\",\"aboutTitle\":\"ProfileInfo_aboutTitle__i71si\",\"editBtn\":\"ProfileInfo_editBtn__WaZ4I\",\"aboutDataWrapper\":\"ProfileInfo_aboutDataWrapper__TgJsJ\",\"aboutData\":\"ProfileInfo_aboutData__FiLjd\",\"editAboutData\":\"ProfileInfo_editAboutData__aWrCg\",\"aboutDataTitle\":\"ProfileInfo_aboutDataTitle__XIlyV\",\"aboutDataText\":\"ProfileInfo_aboutDataText__9YSgG\",\"contactsWrapper\":\"ProfileInfo_contactsWrapper__9skYb\",\"editContactsWrapper\":\"ProfileInfo_editContactsWrapper__wDyzx\",\"editContact\":\"ProfileInfo_editContact__db++J\",\"contacts\":\"ProfileInfo_contacts__ZKF3m\",\"saveBtn\":\"ProfileInfo_saveBtn__HLiMP\"};","import React, {ChangeEvent, FC, useEffect, useState} from 'react';\r\nimport s from './ProfileInfo.module.css'\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\nexport const ProfileStatusWithHooks: FC<ProfileStatusPropsType> = (props) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [status, setStatus] = useState<string>(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status]);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deActivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div className={s.userStatus}>\r\n            {\r\n                !editMode\r\n                    ? <div>\r\n                        <span onDoubleClick={activateEditMode} title=\"Double click to edit\">{props.status}</span>\r\n                    </div>\r\n                    : <div>\r\n                        <input className={s.userStatusInput} autoFocus={true} onChange={onStatusChange}\r\n                               onBlur={deActivateEditMode} value={status}/>\r\n                    </div>\r\n            }\r\n\r\n\r\n        </div>\r\n    );\r\n}","import React, {FC} from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input, Textarea} from \"../../../common/FormsControls/FormsControls\";\r\nimport {ProfileType} from \"../../../../redux/profile-reducer\";\r\nimport style from \"../../../common/FormsControls/FormsControls.module.css\";\r\nimport s from '../ProfileInfo.module.css'\r\n\r\ntype Props = {\r\n    profile: ProfileType\r\n}\r\n\r\nexport type ProfileDataFormType = {\r\n    fullName: string\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    aboutMe: string\r\n}\r\nconst ProfileDataForm: FC<InjectedFormProps<ProfileDataFormType, Props> & Props> = ({handleSubmit, error, profile}) => {\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit} className={s.aboutDataWrapper}>\r\n            <div className={s.aboutData}>\r\n                <span className={s.aboutDataTitle}>Full name:</span>\r\n                <Field name=\"fullName\" placeholder=\"Full name\" component={Input}/>\r\n            </div>\r\n            <div className={s.aboutData}>\r\n                <span className={s.aboutDataTitle}>Looking for a job:</span>\r\n                <Field name=\"lookingForAJob\" type=\"checkbox\" component={Input}/>\r\n            </div>\r\n            <div className={s.aboutData}>\r\n                <span className={s.aboutDataTitle}>My professional skills:</span>\r\n                <Field name=\"lookingForAJobDescription\" placeholder=\"My professional skills\" component={Textarea}/>\r\n            </div>\r\n            <div className={s.aboutData}>\r\n                <span className={s.aboutDataTitle}>About me:</span>\r\n                <Field name=\"aboutMe\" placeholder=\"About me\" component={Textarea}/>\r\n            </div>\r\n\r\n            <div className={s.aboutData + \" \" + s.editAboutData}>\r\n                <span className={s.aboutDataTitle}>Contacts:</span>\r\n                <div className={s.editContactsWrapper}>\r\n                    {\r\n                        profile.contacts &&\r\n                        Object.keys(profile.contacts).map(key => {\r\n                            return (\r\n                                <div key={key} className={s.editContact}>\r\n                                    <span className={s.aboutDataTitle}>{key}:</span>\r\n                                    <Field name={\"contacts.\" + key} placeholder={key} component={Input}/>\r\n                                </div>\r\n                            )\r\n\r\n                        })\r\n                    }\r\n                </div>\r\n            </div>\r\n            {\r\n            error && <div className={style.formSummaryError}>\r\n                    {error}\r\n                </div>\r\n            }\r\n            <button className={s.saveBtn}>\r\n                <i className=\"fa-regular fa-floppy-disk\"></i>\r\n                Save\r\n            </button>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nexport const ProfileDataReduxForm = reduxForm<ProfileDataFormType, Props>({form: 'edit-profile'})(ProfileDataForm)","import React, {ChangeEvent, FC, useState} from 'react';\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport mainImg from \"../../../assets/images/main-image.jpg\";\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport noPhoto from '../../../assets/images/noPhoto.jpg'\r\nimport {ContactsType, ProfileType} from \"../../../redux/profile-reducer\";\r\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWithHooks\";\r\nimport {ProfileDataFormType, ProfileDataReduxForm} from \"./ProfileDataForm/ProfileDataForm\";\r\nimport {typeOptions} from \"@testing-library/user-event/dist/type/typeImplementation\";\r\n\r\ntype ProfileInfoPropsType = {\r\n    isOwner: boolean\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileDataFormType) => Promise<any>\r\n}\r\n\r\nexport const ProfileInfo: FC<ProfileInfoPropsType> = ({\r\n                                                          isOwner,\r\n                                                          profile,\r\n                                                          status,\r\n                                                          updateStatus,\r\n                                                          savePhoto,\r\n                                                          saveProfile\r\n                                                      }) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData: ProfileDataFormType) => {\r\n        saveProfile(formData).then(() => {\r\n            setEditMode(false)\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={s.profileInfoWrapper}>\r\n                <div className={s.mainImgBox}>\r\n                    <img src={mainImg} alt=\"main image\"/>\r\n                </div>\r\n\r\n                <div className={s.descBlock}>\r\n                    <div className={s.userPhotoBox}>\r\n                        <div className={s.userPhoto}>\r\n                            <img src={profile.photos.large || noPhoto} alt=\"user image\"/>\r\n                            {isOwner\r\n                                && <div className={s.changePhotoBox}>\r\n                                    <label htmlFor=\"photoChange\" className={s.changePhotoLabel}>change\r\n                                        <input type=\"file\" className={s.changePhotoInput} id=\"photoChange\"\r\n                                               onChange={onMainPhotoSelected}/>\r\n                                    </label>\r\n                                </div>}\r\n\r\n\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <div className={s.userFullName}>{profile.fullName}</div>\r\n                        <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={s.aboutWrapper}>\r\n                <div className={s.aboutTitleWrapper}>\r\n                    <h3 className={s.aboutTitle}>About</h3>\r\n                    {isOwner && !editMode &&\r\n                        <button className={s.editBtn} onClick={() => setEditMode(true)}>\r\n                            <i className=\"fa-regular fa-pen-to-square\"></i>\r\n                        </button>}\r\n                </div>\r\n\r\n                {\r\n                    editMode\r\n                        ? <ProfileDataReduxForm profile={profile} initialValues={profile} onSubmit={onSubmit}/>\r\n                        : <ProfileData profile={profile}/>\r\n                }\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\ntype ProfileDataProps = {\r\n    profile: ProfileType\r\n}\r\nconst ProfileData = ({profile}: ProfileDataProps) => {\r\n\r\n    const profileContacts = Object.keys(profile.contacts) as Array<keyof ContactsType>;\r\n\r\n    return (\r\n        <div className={s.aboutDataWrapper}>\r\n\r\n            <div className={s.aboutData}>\r\n                <span className={s.aboutDataTitle}>Full name:</span>\r\n                <span className={s.aboutDataText}>{profile.fullName}</span>\r\n            </div>\r\n            <div className={s.aboutData}>\r\n                <span className={s.aboutDataTitle}>Looking for a job:</span>\r\n                <span className={s.aboutDataText}>{profile.lookingForAJob ? \"yes\" : \"no\"}</span>\r\n            </div>\r\n            {\r\n            profile.lookingForAJob &&\r\n                <div className={s.aboutData}>\r\n                    <span className={s.aboutDataTitle}>My professional skills:</span>\r\n                    <span className={s.aboutDataText}>{profile.lookingForAJobDescription}</span>\r\n                </div>\r\n            }\r\n            <div className={s.aboutData}>\r\n                <span className={s.aboutDataTitle}>About me:</span>\r\n                <span className={s.aboutDataText}>{profile.aboutMe}</span>\r\n            </div>\r\n            <div className={s.aboutData}>\r\n                <span className={s.aboutDataTitle}>Contacts:</span>\r\n                <div className={s.contactsWrapper}>\r\n                    {\r\n                        profileContacts.map((key) => {\r\n                            return <Contacts key={key} contactTitle={key} contactValue={profile.contacts[key] }/>\r\n                        })\r\n                    }\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\ntype ContactsProps = {\r\n    contactTitle: string\r\n    contactValue: string | null\r\n}\r\nconst Contacts = ({contactTitle, contactValue}: ContactsProps) => {\r\n\r\n    const getContact = () => {\r\n        if (contactValue) {\r\n            let icon;\r\n            switch (contactTitle) {\r\n                case 'facebook':\r\n                    icon = <i className=\"fa-brands fa-facebook\"></i>\r\n                    break\r\n                case 'website':\r\n                    icon = <i className=\"fa-solid fa-link\"></i>\r\n                    break\r\n                case 'vk':\r\n                    icon = <i className=\"fa-brands fa-vk\"></i>\r\n                    break\r\n                case 'twitter':\r\n                    icon = <i className=\"fa-brands fa-twitter\"></i>\r\n                    break\r\n                case 'instagram':\r\n                    icon = <i className=\"fa-brands fa-instagram\"></i>\r\n                    break\r\n                case 'youtube':\r\n                    icon = <i className=\"fa-brands fa-youtube\"></i>\r\n                    break\r\n                case 'github':\r\n                    icon = <i className=\"fa-brands fa-github\"></i>\r\n                    break\r\n                case 'mainLink':\r\n                    icon = <i className=\"fa-brands fa-linkedin\"></i>\r\n                    break\r\n\r\n            }\r\n            return <a href={contactValue} target='_blank'>{icon}</a>\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div className={s.contacts}>\r\n            {getContact()}\r\n        </div>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"postsWrapper\":\"MyPosts_postsWrapper__nORtv\",\"addPostFormWrapper\":\"MyPosts_addPostFormWrapper__Cpibn\",\"addPostForm\":\"MyPosts_addPostForm__ie91O\",\"addPostFormTitleWrapper\":\"MyPosts_addPostFormTitleWrapper__KjOMm\",\"addPostFormTitle\":\"MyPosts_addPostFormTitle__+lAhj\",\"addPostFormIconWrapper\":\"MyPosts_addPostFormIconWrapper__pGU6o\",\"addPostField\":\"MyPosts_addPostField__VqpnH\",\"addPostBtn\":\"MyPosts_addPostBtn__AZF5I\",\"posts\":\"MyPosts_posts__uW1HD\"};","// extracted by mini-css-extract-plugin\nexport default {\"postWrapper\":\"Post_postWrapper__fSVrh\",\"post\":\"Post_post__INxKH\",\"postAuthor\":\"Post_postAuthor__uHUCk\",\"authorNameWrapper\":\"Post_authorNameWrapper__Nxfd8\",\"authorName\":\"Post_authorName__lMD+K\",\"postTime\":\"Post_postTime__WeQ3v\",\"postText\":\"Post_postText__cmncz\",\"seeMore\":\"Post_seeMore__DAjdM\",\"postBottom\":\"Post_postBottom__r+ELb\",\"likeBtn\":\"Post_likeBtn__8A9RM\",\"likesCount\":\"Post_likesCount__KCm6Q\"};","import React, {FC} from 'react';\r\nimport s from \"./Post.module.css\";\r\nimport noPhoto from '../../../../assets/images/noPhoto.jpg'\r\n\r\ntype PostPropsType = {\r\n    postId: string\r\n    message: string\r\n    likesCount: number\r\n    likeIncrease: (postId: string) => void\r\n}\r\n\r\nexport const Post: FC<PostPropsType> = ({postId, message, likesCount, likeIncrease}) => {\r\n\r\n    const onLikeIncrease = () => {\r\n        likeIncrease(postId)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postWrapper}>\r\n            <div className={s.post}>\r\n                <div className={s.postAuthor}>\r\n                    <div className={s.authorPhoto}>\r\n                        <img src={noPhoto} alt=\"\"/>\r\n                    </div>\r\n\r\n                    <div className={s.authorNameWrapper}>\r\n                        <span className={s.authorName}>Victor Exrixon</span>\r\n                        <span className={s.postTime}>22 min ago</span>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                <div className={s.postText}>\r\n                    {message}\r\n                    <span className={s.seeMore}>\r\n                        <a href=\"#\">See more</a>\r\n                    </span>\r\n                </div>\r\n\r\n                <div className={s.postBottom}>\r\n                    <button className={s.likeBtn} onClick={onLikeIncrease}><i className=\"fa-solid fa-thumbs-up\"></i></button>\r\n                    <span className={s.likesCount}>{likesCount} Like</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n};","import React, {FC} from 'react';\r\nimport s from './MyPosts.module.css'\r\nimport {Post} from \"./Post/Post\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../../components/common/FormsControls/FormsControls\";\r\nimport {PostType} from \"../../../redux/profile-reducer\";\r\n\r\ntype MyPostsPropsType = {\r\n    posts: PostType[]\r\n    addPost: (newPostText: string) => void\r\n    likeIncrease: (postId: string) => void\r\n}\r\nexport const MyPosts = React.memo((props: MyPostsPropsType) => {\r\n    let {posts, addPost} = props;\r\n    const onAddPost = (values: FormDataType) => {\r\n        addPost(values.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsWrapper}>\r\n            <AddNewPostReduxForm onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {\r\n                    posts.map(p => <Post key={p.id} postId={p.id} message={p.message} likesCount={p.likesCount} likeIncrease={props.likeIncrease}/>)\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\ntype FormDataType = {\r\n    newPostText: string\r\n}\r\n\r\nconst maxLength1000 = maxLengthCreator(1000)\r\nconst AddNewPostForm: FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <div className={s.addPostFormWrapper}>\r\n            <form onSubmit={props.handleSubmit} className={s.addPostForm}>\r\n                <div className={s.addPostFormTitleWrapper}>\r\n                    <div className={s.addPostFormIconWrapper}>\r\n                        <i className=\"fa-solid fa-pencil\"></i>\r\n                    </div>\r\n                    <span className={s.addPostFormTitle}>Create post</span>\r\n                </div>\r\n                <div className={s.addPostField}>\r\n                    <Field name=\"newPostText\"\r\n                           component={Textarea}\r\n                           placeholder=\"Enter your post\"\r\n                           validate={[required, maxLength1000]}/>\r\n                </div>\r\n                <div className={s.addPostBtn}>\r\n                    <button>Add post</button>\r\n                </div>\r\n\r\n            </form>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nconst AddNewPostReduxForm = reduxForm<FormDataType>({\r\n    form: 'profileAddNewPostForm'\r\n})(AddNewPostForm)","import React from 'react';\r\nimport {addPostAC, likeIncrease, ProfileActionsType} from \"../../../redux/profile-reducer\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {StateType} from \"../../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst mapStateToProps = (state: StateType) => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: (action: ProfileActionsType) => void) => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostAC(newPostText))\r\n        },\r\n        likeIncrease: (postId: string) => {\r\n            dispatch(likeIncrease(postId))\r\n        }\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)","// extracted by mini-css-extract-plugin\nexport default {\"profileWrapper\":\"Profile_profileWrapper__wYgpM\"};","import React, {FC} from 'react';\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../redux/profile-reducer\";\r\nimport {ProfileDataFormType} from \"./ProfileInfo/ProfileDataForm/ProfileDataForm\";\r\nimport s from \"./Profile.module.css\";\r\n\r\ntype ProfilePropsType = {\r\n    isOwner: boolean\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileDataFormType) => Promise<any>\r\n}\r\n\r\nexport const Profile: FC<ProfilePropsType> = ({profile, isOwner, status, updateStatus, savePhoto, saveProfile}) => {\r\n    return (\r\n        <div className={s.profileWrapper}>\r\n            <ProfileInfo isOwner={isOwner}\r\n                         profile={profile}\r\n                         status={status}\r\n                         updateStatus={updateStatus}\r\n                         savePhoto={savePhoto}\r\n                         saveProfile={saveProfile}/>\r\n            { isOwner && <MyPostsContainer/> }\r\n        </div>\r\n    );\r\n};","import React, {Component} from 'react';\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateType} from \"../../redux/redux-store\";\r\nimport {\r\n    getStatus,\r\n    getUserProfile,\r\n    ProfileType,\r\n    savePhoto,\r\n    saveProfile,\r\n    updateStatus\r\n} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {ProfileDataFormType} from \"./ProfileInfo/ProfileDataForm/ProfileDataForm\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    authorizedUserId: number | null\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileDataFormType) => Promise<any>\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\ntype ProfileContainerPropsType = MapStatePropsType & MapDispatchPropsType\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfileContainerPropsType\r\n\r\nclass ProfileContainer extends Component<PropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId ? String(this.props.authorizedUserId) : \"\"\r\n            if (!userId) this.props.history.push(\"/login\")\r\n        }\r\n\r\n        this.props.getUserProfile(Number(userId))\r\n        this.props.getStatus(Number(userId))\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<MapStatePropsType>) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId || this.props.isAuth !== prevProps.isAuth) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Profile {...this.props}\r\n                     isOwner={!this.props.match.params.userId}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n                     savePhoto={this.props.savePhoto}\r\n                     saveProfile={this.props.saveProfile}/>\r\n        );\r\n    }\r\n\r\n};\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter,\r\n    // withAuthRedirect\r\n)(ProfileContainer)","import styles from './FormsControls.module.css'\r\n\r\nexport const FormControl = ({input, meta: {touched, error}, children, ...props}: any) => {\r\n    const hasError = touched && error\r\n\r\n    return (\r\n        <div className={styles.formControl+\" \"+(hasError ? styles.error : \"\")}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\nexport const Textarea = (props: any) => {\r\n\r\n    const {input, meta, ...restProps} = props\r\n\r\n    return (\r\n        <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\r\n    )\r\n}\r\n\r\nexport const Input = (props: any) => {\r\n\r\n    const {input, meta, ...restProps} = props\r\n\r\n    return (\r\n        <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n    )\r\n}","export const required = (value: string) => {\r\n    if (value) {\r\n        return undefined\r\n    }\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n    if (value.length > maxLength) {\r\n        return `Max length is ${maxLength} symbols`\r\n    }\r\n    return undefined\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__Fo9Fg\",\"error\":\"FormsControls_error__Mz112\",\"formSummaryError\":\"FormsControls_formSummaryError__EQHcD\"};"],"names":["ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","className","s","autoFocus","onChange","e","currentTarget","value","onBlur","updateStatus","onDoubleClick","title","ProfileDataReduxForm","reduxForm","form","handleSubmit","error","profile","onSubmit","Field","name","placeholder","component","Input","type","Textarea","contacts","Object","keys","map","key","style","ProfileInfo","isOwner","savePhoto","saveProfile","Preloader","src","mainImg","alt","photos","large","noPhoto","htmlFor","id","target","files","length","fullName","onClick","initialValues","formData","then","ProfileData","profileContacts","lookingForAJob","lookingForAJobDescription","aboutMe","Contacts","contactTitle","contactValue","icon","href","getContact","Post","postId","message","likesCount","likeIncrease","MyPosts","React","posts","addPost","AddNewPostReduxForm","values","newPostText","p","maxLength1000","maxLengthCreator","validate","required","MyPostsContainer","connect","state","profilePage","dispatch","addPostAC","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","String","history","push","getUserProfile","Number","getStatus","refreshProfile","prevProps","prevState","isAuth","Component","compose","auth","withRouter","FormControl","input","meta","touched","children","hasError","styles","restProps","maxLength"],"sourceRoot":""}