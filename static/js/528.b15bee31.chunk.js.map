{"version":3,"file":"static/js/528.b15bee31.chunk.js","mappings":"iOACA,EAA6B,gCAA7B,EAAyE,+BAAzE,EAAoH,+B,+CCKvGA,EAAqD,SAACC,GAE/D,OAAgCC,EAAAA,EAAAA,WAAkB,GAAlD,eAAOC,EAAP,KAAiBC,EAAjB,KACA,GAA4BF,EAAAA,EAAAA,UAAiBD,EAAMI,QAAnD,eAAOA,EAAP,KAAeC,EAAf,MAEAC,EAAAA,EAAAA,YAAU,WACND,EAAUL,EAAMI,UACjB,CAACJ,EAAMI,SAaV,OACI,yBAESF,GAIK,0BACE,kBAAOK,WAAW,EAAMC,SAZrB,SAACC,GACpBJ,EAAUI,EAAEC,cAAcC,QAYHC,OAjBA,WACvBT,GAAY,GACZH,EAAMa,aAAaT,IAegCO,MAAOP,OAL5C,0BACE,iBAAMU,cAhBD,WACrBX,GAAY,IAeI,SAAwCH,EAAMI,cCjBzDW,EAAwC,SAAC,GAAqC,IAApCC,EAAmC,EAAnCA,QAASZ,EAA0B,EAA1BA,OAAQS,EAAkB,EAAlBA,aACpE,OAAKG,GAID,4BACI,gBAAKC,UAAWC,EAAhB,UACI,gBAAKC,IAAKC,EAASC,IAAI,kBAG3B,iBAAKJ,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAaC,IAAKH,EAAQM,OAAOC,MAAQP,EAAQM,OAAOC,MAAQC,EAASH,IAAI,gBAC7F,4BACI,0BAAOL,EAAQS,WACf,SAAC1B,EAAD,CAAwBK,OAAQA,EAAQS,aAAcA,cAZ3D,SAACa,EAAA,EAAD,K,QCff,EAA6B,4BAA7B,EAAiE,uBCAjE,EAAuB,mBCQVC,EAA0B,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,WAC9C,OACI,iBAAKZ,UAAWC,EAAhB,WACI,gBAAKC,IAAKK,EAASH,IAAI,KACtBO,GACD,4BACI,sCADJ,IAC4BC,S,uCCH3BC,EAAUC,EAAAA,MAAW,SAAC/B,GAC/B,IAAKgC,EAAkBhC,EAAlBgC,MAAOC,EAAWjC,EAAXiC,QAKZ,OACI,iBAAKhB,UAAWC,EAAhB,WACI,sCACA,SAACgB,EAAD,CAAqBC,SAPX,SAACC,GACfH,EAAQG,EAAOC,iBAOX,gBAAKpB,UAAWC,EAAhB,SAEQc,EAAMM,KAAI,SAAAC,GAAC,OAAI,SAACZ,EAAD,CAAiBC,QAASW,EAAEX,QAASC,WAAYU,EAAEV,YAAxCU,EAAEC,eAW1CC,GAAcC,EAAAA,EAAAA,GAAiB,IAkB/BR,GAAsBS,EAAAA,EAAAA,GAAwB,CAChDC,KAAM,yBADkBD,EAjBgC,SAAC3C,GACzD,OACI,kBAAMmC,SAAUnC,EAAM6C,aAAtB,WACI,0BACI,SAACC,EAAA,EAAD,CAAOC,KAAK,cACLC,UAAWC,EAAAA,GACXC,YAAY,kBACZC,SAAU,CAACC,EAAAA,EAAUX,QAEhC,0BACI,iD,SC3BHY,GAAmBC,EAAAA,EAAAA,KAbR,SAACC,GACrB,MAAO,CACHvB,MAAOuB,EAAMC,YAAYxB,UAGN,SAACyB,GACxB,MAAO,CACHxB,QAAS,SAACI,GACNoB,GAASC,EAAAA,EAAAA,IAAUrB,QAKCiB,CAA6CxB,GCRhE6B,EAAgC,SAAC,GAAqC,IAApC3C,EAAmC,EAAnCA,QAASZ,EAA0B,EAA1BA,OAAQS,EAAkB,EAAlBA,aAC5D,OACI,4BACI,SAACE,EAAD,CAAaC,QAASA,EAASZ,OAAQA,EAAQS,aAAcA,KAC7D,SAACwC,EAAD,Q,oBCaNO,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,EAAAA,MAAAA,KAAAA,WAkBD,OAlBCA,EAAAA,EAAAA,GAAAA,EAAAA,CAAAA,CAAAA,IAAAA,oBAAAA,MAEF,WACI,IAAIC,EAASC,KAAK9D,MAAM+D,MAAMC,OAAOH,OAChCA,IACDA,EAASC,KAAK9D,MAAMiE,iBAAmBC,OAAOJ,KAAK9D,MAAMiE,kBAAoB,KAChEH,KAAK9D,MAAMmE,QAAQC,KAAK,UAGzCN,KAAK9D,MAAMqE,eAAeC,OAAOT,IACjCC,KAAK9D,MAAMuE,UAAUD,OAAOT,MAC/B,oBAED,WAEI,OACI,SAACF,GAAD,kBAAaG,KAAK9D,OAAlB,IAAyBgB,QAAS8C,KAAK9D,MAAMgB,QAASZ,OAAQ0D,KAAK9D,MAAMI,OAAQS,aAAciD,KAAK9D,MAAMa,oBAEjH,EAlBC+C,CAAyBY,EAAAA,WA6B/B,GAAeC,EAAAA,EAAAA,KACXnB,EAAAA,EAAAA,KARoB,SAACC,GAAD,MAA0C,CAC9DvC,QAASuC,EAAMC,YAAYxC,QAC3BZ,OAAQmD,EAAMC,YAAYpD,OAC1B6D,iBAAkBV,EAAMmB,KAAKb,OAC7Bc,OAAQpB,EAAMmB,KAAKC,UAIM,CAACN,eAAAA,EAAAA,GAAgBE,UAAAA,EAAAA,GAAW1D,aAAAA,EAAAA,KACrD+D,EAAAA,GAFJ,CAIEhB,I,6LC3DWiB,EAAc,SAAC,GAA6D,EAA5DC,MAA6D,IAAD,IAArDC,KAAOC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,MAAQC,EAA6B,EAA7BA,SAClDC,IAD+E,YACpEH,GAAWC,GAE5B,OACI,iBAAKhE,UAAWmE,EAAAA,EAAAA,YAAmB,KAAKD,EAAWC,EAAAA,EAAAA,MAAe,IAAlE,WACI,yBACKF,IAEJC,IAAY,0BAAOF,QAInBhC,EAAW,SAACjD,GAErB,IAAO8E,EAA6B9E,EAA7B8E,MAAgBO,GAAarF,EAAtB+E,MAAd,OAAoC/E,EAApC,IAEA,OACI,SAAC6E,GAAD,kBAAiB7E,GAAjB,cAAwB,uCAAc8E,GAAWO,QAI5CC,EAAQ,SAACtF,GAElB,IAAO8E,EAA6B9E,EAA7B8E,MAAgBO,GAAarF,EAAtB+E,MAAd,OAAoC/E,EAApC,IAEA,OACI,SAAC6E,GAAD,kBAAiB7E,GAAjB,cAAwB,oCAAW8E,GAAWO,S,4EC5B/C,IAAMjC,EAAW,SAACzC,GACrB,IAAIA,EAGJ,MAAO,qBAGE+B,EAAmB,SAAC6C,GAAD,OAAuB,SAAC5E,GACpD,GAAIA,EAAM6E,OAASD,EACf,MAAM,iBAAN,OAAwBA,EAAxB,e,mBCRR,KAAgB,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB,0C","sources":["webpack://social-network/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://social-network/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://social-network/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/common/FormsControls/FormsControls.tsx","utils/validators/validators.ts","webpack://social-network/./src/components/common/FormsControls/FormsControls.module.css?eb50"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"mainImgBox\":\"ProfileInfo_mainImgBox__3mgel\",\"descBlock\":\"ProfileInfo_descBlock__-g+cO\",\"userPhoto\":\"ProfileInfo_userPhoto__T7LES\"};","import React, {ChangeEvent, FC, useEffect, useState} from 'react';\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\nexport const ProfileStatusWithHooks: FC<ProfileStatusPropsType> = (props) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [status, setStatus] = useState<string>(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status]);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deActivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                !editMode\r\n                    ? <div>\r\n                        <span onDoubleClick={activateEditMode}>{props.status}</span>\r\n                    </div>\r\n                    : <div>\r\n                        <input autoFocus={true} onChange={onStatusChange}\r\n                               onBlur={deActivateEditMode} value={status}/>\r\n                    </div>\r\n            }\r\n\r\n\r\n        </div>\r\n    );\r\n}","import React, {FC} from 'react';\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport mainImg from \"../../../assets/images/main-image.jpg\";\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport noPhoto from '../../../assets/images/noPhoto.jpg'\r\nimport {ProfileType} from \"../../../redux/profile-reducer\";\r\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWithHooks\";\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileInfo: FC<ProfileInfoPropsType> = ({profile, status, updateStatus}) => {\r\n    if (!profile) {\r\n        return <Preloader />\r\n    }\r\n    return (\r\n        <div>\r\n            <div className={s.mainImgBox}>\r\n                <img src={mainImg} alt=\"main image\"/>\r\n            </div>\r\n\r\n            <div className={s.descBlock}>\r\n                <img className={s.userPhoto} src={profile.photos.large ? profile.photos.large : noPhoto} alt=\"user image\"/>\r\n                <div>\r\n                    <span>{profile.aboutMe}</span>\r\n                    <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__FHynY\",\"posts\":\"MyPosts_posts__uW1HD\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__STFvM\"};","import React, {FC} from 'react';\r\nimport s from \"./Post.module.css\";\r\nimport noPhoto from '../../../../assets/images/noPhoto.jpg'\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nexport const Post: FC<PostPropsType> = ({message, likesCount}) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src={noPhoto} alt=\"\"/>\r\n            {message}\r\n            <div>\r\n                <button>Like </button> {likesCount}\r\n            </div>\r\n        </div>\r\n    );\r\n};","import React, {FC} from 'react';\r\nimport s from './MyPosts.module.css'\r\nimport {Post} from \"./Post/Post\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../../components/common/FormsControls/FormsControls\";\r\nimport {PostType} from \"../../../redux/profile-reducer\";\r\n\r\ntype MyPostsPropsType = {\r\n    posts: PostType[]\r\n    addPost: (newPostText: string) => void\r\n}\r\nexport const MyPosts = React.memo((props: MyPostsPropsType) => {\r\n    let {posts, addPost} = props;\r\n    const onAddPost = (values: FormDataType) => {\r\n        addPost(values.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h2>My posts</h2>\r\n            <AddNewPostReduxForm onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {\r\n                    posts.map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount}/>)\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\ntype FormDataType = {\r\n    newPostText: string\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\nconst AddNewPostForm: FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name=\"newPostText\"\r\n                       component={Textarea}\r\n                       placeholder=\"Enter your post\"\r\n                       validate={[required, maxLength10]}/>\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddNewPostReduxForm = reduxForm<FormDataType>({\r\n    form: 'profileAddNewPostForm'\r\n})(AddNewPostForm)","import React from 'react';\r\nimport {addPostAC, ProfileActionsType} from \"../../../redux/profile-reducer\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {StateType} from \"../../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst mapStateToProps = (state: StateType) => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: (action: ProfileActionsType) => void) => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostAC(newPostText))\r\n        }\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)","import React, {FC} from 'react';\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../redux/profile-reducer\";\r\n\r\ntype ProfilePropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const Profile: FC<ProfilePropsType> = ({profile, status, updateStatus}) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={profile} status={status} updateStatus={updateStatus}/>\r\n            <MyPostsContainer />\r\n        </div>\r\n    );\r\n};","import React, {Component} from 'react';\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateType} from \"../../redux/redux-store\";\r\nimport {getStatus, getUserProfile, ProfileType, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    authorizedUserId: number | null\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\ntype ProfileContainerPropsType = MapStatePropsType & MapDispatchPropsType\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfileContainerPropsType\r\n\r\nclass ProfileContainer extends Component<PropsType>{\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId ? String(this.props.authorizedUserId) : \"\"\r\n            if (!userId) this.props.history.push(\"/login\")\r\n        }\r\n\r\n        this.props.getUserProfile(Number(userId))\r\n        this.props.getStatus(Number(userId))\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Profile {...this.props} profile={this.props.profile} status={this.props.status} updateStatus={this.props.updateStatus}/>\r\n        );\r\n    }\r\n\r\n};\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus}),\r\n    withRouter,\r\n    // withAuthRedirect\r\n)(ProfileContainer)","import styles from './FormsControls.module.css'\r\n\r\nexport const FormControl = ({input, meta: {touched, error}, children, ...props}: any) => {\r\n    const hasError = touched && error\r\n\r\n    return (\r\n        <div className={styles.formControl+\" \"+(hasError ? styles.error : \"\")}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\nexport const Textarea = (props: any) => {\r\n\r\n    const {input, meta, ...restProps} = props\r\n\r\n    return (\r\n        <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\r\n    )\r\n}\r\n\r\nexport const Input = (props: any) => {\r\n\r\n    const {input, meta, ...restProps} = props\r\n\r\n    return (\r\n        <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n    )\r\n}","export const required = (value: string) => {\r\n    if (value) {\r\n        return undefined\r\n    }\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n    if (value.length > maxLength) {\r\n        return `Max length is ${maxLength} symbols`\r\n    }\r\n    return undefined\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__Fo9Fg\",\"error\":\"FormsControls_error__Mz112\",\"formSummaryError\":\"FormsControls_formSummaryError__EQHcD\"};"],"names":["ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","autoFocus","onChange","e","currentTarget","value","onBlur","updateStatus","onDoubleClick","ProfileInfo","profile","className","s","src","mainImg","alt","photos","large","noPhoto","aboutMe","Preloader","Post","message","likesCount","MyPosts","React","posts","addPost","AddNewPostReduxForm","onSubmit","values","newPostText","map","p","id","maxLength10","maxLengthCreator","reduxForm","form","handleSubmit","Field","name","component","Textarea","placeholder","validate","required","MyPostsContainer","connect","state","profilePage","dispatch","addPostAC","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","String","history","push","getUserProfile","Number","getStatus","Component","compose","auth","isAuth","withRouter","FormControl","input","meta","touched","error","children","hasError","styles","restProps","Input","maxLength","length"],"sourceRoot":""}