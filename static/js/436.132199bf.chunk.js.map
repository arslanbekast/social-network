{"version":3,"file":"static/js/436.132199bf.chunk.js","mappings":"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","sources":["webpack://social-network/./src/components/Dialogs/Dialogs.module.css?1b2e","webpack://social-network/./src/components/Dialogs/DialogItem/DialogItem.module.css?beb9","components/Dialogs/DialogItem/DialogItem.tsx","webpack://social-network/./src/components/Dialogs/Message/Message.module.css?72d0","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx","components/common/FormsControls/FormsControls.tsx","utils/validators/validators.ts","webpack://social-network/./src/components/common/FormsControls/FormsControls.module.css?eb50"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__2bp25\",\"dialogsItems\":\"Dialogs_dialogsItems__zv-z1\",\"messages\":\"Dialogs_messages__KtEz7\",\"addMessageForm\":\"Dialogs_addMessageForm__XfLqI\"};","// extracted by mini-css-extract-plugin\nexport default {\"dialog\":\"DialogItem_dialog__QAlh6\",\"active\":\"DialogItem_active__+eo0V\"};","import React, {FC} from 'react';\r\nimport s from './DialogItem.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype DialogItemPropsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nexport const DialogItem: FC<DialogItemPropsType> = ({id, name}) => {\r\n    const path = `/dialogs/${id}`\r\n    return (\r\n        <div className={s.dialog}>\r\n            <NavLink to={path} activeClassName={s.active}>\r\n                <i className=\"fa-solid fa-user\"></i>\r\n                {name}\r\n            </NavLink>\r\n        </div>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"Message_message__+NCfU\"};","import React, {FC} from 'react';\r\nimport s from './Message.module.css';\r\n\r\ntype MessagePropsType = {\r\n    message: string\r\n}\r\n\r\nexport const Message: FC<MessagePropsType> = ({message}) => {\r\n    return <div className={s.message}>{message}</div>\r\n}","import React, {FC} from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport {DialogItem} from \"./DialogItem/DialogItem\";\r\nimport {Message} from \"./Message/Message\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input, Textarea} from \"../../components/common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\n\r\nexport type MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\nexport type DialogType = {\r\n    id: number\r\n    name: string\r\n}\r\nexport type DialogsPageType = {\r\n    dialogs: DialogType[]\r\n    messages: MessageType[]\r\n}\r\ntype MapStatePropsType = {\r\n    dialogsPage: DialogsPageType\r\n}\r\ntype MapDispatchPropsType = {\r\n    sendMessage: (newMessageText: string) => void\r\n}\r\n\r\ntype DialogsPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nexport const Dialogs: FC<DialogsPropsType> = ({sendMessage, dialogsPage}) => {\r\n\r\n    const addNewMessage = (values: FormDataType) => {\r\n        sendMessage(values.newMessageText);\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {\r\n                    dialogsPage.dialogs.map(d => <DialogItem key={d.id} id={d.id} name={d.name} />)\r\n                }\r\n            </div>\r\n            <div className={s.messages}>\r\n                {\r\n                    dialogsPage.messages.map(m => <Message key={m.id} message={m.message} />)\r\n                }\r\n\r\n                <AddMessageReduxForm onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\ntype FormDataType = {\r\n    newMessageText: string\r\n}\r\n\r\nconst maxLength150 = maxLengthCreator(50)\r\nconst AddMessageForm: FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit} className={s.addMessageForm}>\r\n            <Field component={Input}\r\n                   name=\"newMessageText\"\r\n                   placeholder=\"Enter your message\"\r\n                   validate={[required, maxLength150]}/>\r\n            <button>Send</button>\r\n\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageReduxForm = reduxForm<FormDataType>({\r\n    form: 'dialogAddMessageForm'\r\n})(AddMessageForm)","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {StateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport function withAuthRedirect <T>(Component: React.ComponentType<T>) {\r\n\r\n    function RedirectComponent(props: MapStatePropsType) {\r\n\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) return <Redirect to='/login'/>\r\n\r\n        return <Component {...restProps as T} />\r\n    }\r\n\r\n    const ConnectedAuthRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}","import React from 'react';\r\nimport {\r\n    DialogsActionsType,\r\n    sendMessageAC\r\n} from \"../../redux/dialogs-reducer\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {StateType} from \"../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nconst mapStateToProps = (state: StateType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: (action: DialogsActionsType) => void) => {\r\n    return {\r\n        sendMessage: (newMessageText: string) => {\r\n            dispatch(sendMessageAC(newMessageText))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)","import styles from './FormsControls.module.css'\r\n\r\nexport const FormControl = ({input, meta: {touched, error}, children, ...props}: any) => {\r\n    const hasError = touched && error\r\n\r\n    return (\r\n        <div className={styles.formControl+\" \"+(hasError ? styles.error : \"\")}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\nexport const Textarea = (props: any) => {\r\n\r\n    const {input, meta, ...restProps} = props\r\n\r\n    return (\r\n        <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\r\n    )\r\n}\r\n\r\nexport const Input = (props: any) => {\r\n\r\n    const {input, meta, ...restProps} = props\r\n\r\n    return (\r\n        <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n    )\r\n}","export const required = (value: string) => {\r\n    if (value) {\r\n        return undefined\r\n    }\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n    if (value.length > maxLength) {\r\n        return `Max length is ${maxLength} symbols`\r\n    }\r\n    return undefined\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__Fo9Fg\",\"error\":\"FormsControls_error__Mz112\",\"formSummaryError\":\"FormsControls_formSummaryError__EQHcD\"};"],"names":["DialogItem","id","name","path","className","s","to","activeClassName","Message","message","maxLength150","maxLengthCreator","AddMessageReduxForm","reduxForm","form","props","onSubmit","handleSubmit","Field","component","Input","placeholder","validate","required","mapStateToProps","state","isAuth","auth","compose","connect","dialogsPage","dispatch","sendMessage","newMessageText","sendMessageAC","Component","restProps","dialogs","map","d","messages","m","values","FormControl","input","meta","touched","error","children","hasError","styles","Textarea","value","maxLength","length"],"sourceRoot":""}