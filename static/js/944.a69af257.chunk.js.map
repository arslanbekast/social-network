{"version":3,"file":"static/js/944.a69af257.chunk.js","mappings":"8NAgEMA,GAAiBC,EAAAA,EAAAA,GAAwB,CAC3CC,KAAM,SADaD,EA3BgC,SAAC,GAA2B,IAA1BE,EAAyB,EAAzBA,aAAcC,EAAW,EAAXA,MAEnE,OACQ,kBAAMC,SAAUF,EAAhB,WACI,0BACI,SAAC,IAAD,CAAOG,KAAK,QAAQC,YAAY,QAAQC,UAAWC,EAAAA,GAAOC,SAAU,CAACC,EAAAA,QAEzE,0BACI,SAAC,IAAD,CAAOC,KAAK,WAAWN,KAAK,WAAWC,YAAY,WAAWC,UAAWC,EAAAA,GAAOC,SAAU,CAACC,EAAAA,QAE/F,iBAAKE,MAAO,CAACC,QAAS,OAAQC,WAAY,UAA1C,WACI,SAAC,IAAD,CAAOH,KAAK,WAAWN,KAAK,aAAaU,GAAG,aAAaR,UAAWC,EAAAA,MACpE,kBAAOQ,QAAQ,aAAf,4BAGAb,IAAS,gBAAKc,UAAWL,EAAAA,EAAAA,iBAAhB,SACJT,KAIT,0BACI,8CAapB,WAAee,EAAAA,EAAAA,KAHS,SAACC,GAAD,MAAuB,CAC3CC,OAAQD,EAAME,KAAKD,UAEiB,CAACE,MAAAA,EAAAA,IAAzC,EAzDkC,SAAC,GAAqB,IAApBF,EAAmB,EAAnBA,OAAQE,EAAW,EAAXA,MAKxC,OAAIF,GACO,SAAC,KAAD,CAAUG,GAAG,cAIpB,4BACI,mCACA,SAACxB,EAAD,CAAgBK,SAXP,SAACoB,GACdF,EAAME,EAASC,MAAOD,EAASE,SAAUF,EAASG,sB,6LCd7CC,EAAc,SAAC,GAA6D,EAA5DC,MAA6D,IAAD,IAArDC,KAAOC,EAA8C,EAA9CA,QAAS5B,EAAqC,EAArCA,MAAQ6B,EAA6B,EAA7BA,SAClDC,IAD+E,YACpEF,GAAW5B,GAE5B,OACI,iBAAKc,UAAWiB,EAAAA,EAAAA,YAAmB,KAAKD,EAAWC,EAAAA,EAAAA,MAAe,IAAlE,WACI,yBACKF,IAEJC,IAAY,0BAAO9B,QAInBgC,EAAW,SAACC,GAErB,IAAOP,EAA6BO,EAA7BP,MAAgBQ,GAAaD,EAAtBN,MAAd,OAAoCM,EAApC,IAEA,OACI,SAACR,GAAD,kBAAiBQ,GAAjB,cAAwB,uCAAcP,GAAWQ,QAI5C7B,EAAQ,SAAC4B,GAElB,IAAOP,EAA6BO,EAA7BP,MAAgBQ,GAAaD,EAAtBN,MAAd,OAAoCM,EAApC,IAEA,OACI,SAACR,GAAD,kBAAiBQ,GAAjB,cAAwB,oCAAWP,GAAWQ,S,4EC5B/C,IAAM3B,EAAW,SAAC4B,GACrB,IAAIA,EAGJ,MAAO,qBAGEC,EAAmB,SAACC,GAAD,OAAuB,SAACF,GACpD,GAAIA,EAAMG,OAASD,EACf,MAAM,iBAAN,OAAwBA,EAAxB,e,mBCRR,KAAgB,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB","sources":["components/Login/Login.tsx","components/common/FormsControls/FormsControls.tsx","utils/validators/validators.ts","webpack://social-network/./src/components/common/FormsControls/FormsControls.module.css?eb50"],"sourcesContent":["import React, {FC} from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {StateType} from \"../../redux/redux-store\";\r\nimport style from '../common/FormsControls/FormsControls.module.css'\r\n\r\ntype LoginPropsType = {\r\n    isAuth: boolean\r\n    login: (email: string, password: string, rememberMe: boolean) => void\r\n}\r\nconst Login: FC<LoginPropsType> = ({isAuth, login}) => {\r\n    const onSubmit = (formData: FormDataType) => {\r\n        login(formData.email, formData.password, formData.rememberMe)\r\n    }\r\n\r\n    if (isAuth) {\r\n        return <Redirect to=\"/profile\" />\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <LoginReduxForm onSubmit={onSubmit}/>\r\n        </div>\r\n    );\r\n};\r\n\r\ntype FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nconst LoginForm: FC<InjectedFormProps<FormDataType>> = ({handleSubmit, error}) => {\r\n\r\n    return (\r\n            <form onSubmit={handleSubmit}>\r\n                <div>\r\n                    <Field name=\"email\" placeholder=\"Email\" component={Input} validate={[required]}/>\r\n                </div>\r\n                <div>\r\n                    <Field type=\"password\" name=\"password\" placeholder=\"Password\" component={Input} validate={[required]}/>\r\n                </div>\r\n                <div style={{display: \"flex\", alignItems: \"center\"}}>\r\n                    <Field type=\"checkbox\" name=\"rememberMe\" id=\"rememberMe\" component={Input}/>\r\n                    <label htmlFor=\"rememberMe\">Remember me</label>\r\n                </div>\r\n                {\r\n                    error && <div className={style.formSummaryError}>\r\n                        {error}\r\n                    </div>\r\n                }\r\n\r\n                <div>\r\n                    <button>Login</button>\r\n                </div>\r\n            </form>\r\n    );\r\n};\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType>({\r\n    form: 'login'\r\n})(LoginForm)\r\n\r\nconst mapStateToProps = (state: StateType) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\nexport default connect(mapStateToProps, {login})(Login)","import styles from './FormsControls.module.css'\r\n\r\nexport const FormControl = ({input, meta: {touched, error}, children, ...props}: any) => {\r\n    const hasError = touched && error\r\n\r\n    return (\r\n        <div className={styles.formControl+\" \"+(hasError ? styles.error : \"\")}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\nexport const Textarea = (props: any) => {\r\n\r\n    const {input, meta, ...restProps} = props\r\n\r\n    return (\r\n        <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\r\n    )\r\n}\r\n\r\nexport const Input = (props: any) => {\r\n\r\n    const {input, meta, ...restProps} = props\r\n\r\n    return (\r\n        <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n    )\r\n}","export const required = (value: string) => {\r\n    if (value) {\r\n        return undefined\r\n    }\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n    if (value.length > maxLength) {\r\n        return `Max length is ${maxLength} symbols`\r\n    }\r\n    return undefined\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__Fo9Fg\",\"error\":\"FormsControls_error__Mz112\",\"formSummaryError\":\"FormsControls_formSummaryError__EQHcD\"};"],"names":["LoginReduxForm","reduxForm","form","handleSubmit","error","onSubmit","name","placeholder","component","Input","validate","required","type","style","display","alignItems","id","htmlFor","className","connect","state","isAuth","auth","login","to","formData","email","password","rememberMe","FormControl","input","meta","touched","children","hasError","styles","Textarea","props","restProps","value","maxLengthCreator","maxLength","length"],"sourceRoot":""}